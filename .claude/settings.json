{
  "commands": {
    "work": {
      "description": "Collaborative work on GitHub issues/PRs with pair programming approach",
      "command_file": "commands/work.md",
      "interactive_mode": true
    },
    "plan": {
      "description": "Create implementation plans with interactive decision points",
      "command_file": "commands/plan.md",
      "interactive_mode": true
    },
    "implement": {
      "description": "Execute implementation tasks with pattern discussions",
      "command_file": "commands/implement.md",
      "interactive_mode": true
    },
    "review": {
      "description": "Interactive code review with architectural guidance",
      "command_file": "commands/review.md",
      "interactive_mode": true
    },
    "document": {
      "description": "Capture patterns and learnings collaboratively",
      "command_file": "commands/document.md",
      "interactive_mode": true
    },
    "continue": {
      "description": "Continue from current work state with context",
      "command_file": "commands/continue.md",
      "interactive_mode": true
    },
    "milestone": {
      "description": "Break down GitHub milestones into actionable issues collaboratively",
      "command_file": "commands/milestone.md",
      "interactive_mode": true
    }
  },
  "hooks": {
    "pre-commit": {
      "description": "Run quality checks before commits",
      "command": "mix format --check-formatted && mix credo --strict && mix test",
      "enabled": true
    },
    "pre-task": {
      "description": "Ask about approach before starting each task",
      "prompt": "🤝 Before I start this task, let's discuss the approach. What patterns should we follow here?",
      "enabled": true,
      "pause_for_input": true
    },
    "pattern-detected": {
      "description": "Confirm pattern usage when code patterns are detected",
      "prompt": "📋 I noticed a pattern here. Should we apply this consistently throughout the codebase?",
      "enabled": true,
      "pause_for_input": true
    },
    "naming-decision": {
      "description": "Ask for naming preferences when creating new components",
      "prompt": "📝 I need to name this component/module. What would you prefer?",
      "enabled": true,
      "pause_for_input": true
    },
    "architecture-choice": {
      "description": "Present options for architectural decisions",
      "prompt": "🏗️ This requires an architectural decision. I see a few approaches - which fits your vision?",
      "enabled": true,
      "pause_for_input": true
    },
    "implementation-checkpoint": {
      "description": "Regular progress check-ins during implementation",
      "prompt": "✅ Quick checkpoint: I've just completed [task]. Should we continue with this approach or adjust?",
      "enabled": true,
      "pause_for_input": true,
      "frequency": 2
    },
    "post-implementation": {
      "description": "Post-implementation quality and documentation checks",
      "command": "echo 'Implementation complete. Running final checks...' && mix format && mix credo && mix test && mix docs",
      "enabled": true
    },
    "migration-check": {
      "description": "Validate migrations before and after running",
      "command": "mix ecto.migrate --log-sql && mix ecto.rollback && mix ecto.migrate",
      "enabled": true,
      "trigger_on": ["priv/repo/migrations/*.exs"]
    },
    "security-check": {
      "description": "Run security audit on auth-related changes",
      "command": "mix deps.audit && mix sobelow --config",
      "enabled": false,
      "trigger_on": ["**/auth*.ex", "**/session*.ex", "**/permission*.ex"]
    }
  },
  "output_styles": {
    "pair-programming": {
      "description": "Interactive pair programming format for collaborative development",
      "auto_apply": true,
      "file_patterns": ["*"],
      "style_file": "output-styles/pair-programming.md"
    },
    "pattern-discussion": {
      "description": "Format for exploring and discussing code patterns",
      "auto_apply": false,
      "trigger_on": ["pattern_detected", "refactoring_opportunity"],
      "style_file": "output-styles/pattern-discussion.md"
    },
    "decision-point": {
      "description": "Format for presenting architectural and implementation decisions",
      "auto_apply": false,
      "trigger_on": [
        "architecture_decision",
        "implementation_choice",
        "trade_off_analysis"
      ],
      "style_file": "output-styles/decision-point.md"
    },
    "implementation-plan": {
      "description": "Structured format for presenting implementation plans with user checkpoints",
      "auto_apply": false,
      "trigger_on": ["planning_phase", "action_plan_creation"],
      "style_file": "output-styles/implementation-plan.md"
    },
    "database-work": {
      "description": "PostgreSQL/Ecto patterns with migrations and query optimization",
      "auto_apply": true,
      "file_patterns": ["**/migrations/*.exs", "**/schemas/*.ex", "**/repo.ex"],
      "style_file": "output-styles/database-work.md"
    },
    "liveview-ui": {
      "description": "Phoenix LiveView components with Tailwind/DaisyUI styling",
      "auto_apply": true,
      "file_patterns": ["*.heex", "**/live/*.ex", "assets/**/*.js"],
      "style_file": "output-styles/liveview-ui.md"
    },
    "testing-patterns": {
      "description": "Comprehensive testing with ExUnit and property-based tests",
      "auto_apply": true,
      "file_patterns": ["test/**/*.exs", "**/test_helper.exs", "**/*_test.exs"],
      "style_file": "output-styles/testing-patterns.md"
    },
    "documentation": {
      "description": "ExDoc and project documentation standards",
      "auto_apply": true,
      "file_patterns": ["*.md", "guides/*.md", "**/doc.ex"],
      "style_file": "output-styles/documentation.md"
    }
  },
  "project_defaults": {
    "elixir_phoenix": {
      "test_command": "mix test",
      "format_command": "mix format",
      "lint_command": "mix credo --strict",
      "build_command": "mix compile",
      "deps_command": "mix deps.get",
      "security_audit_command": "mix deps.audit",
      "release_command": "MIX_ENV=prod mix release"
    },
    "swift_swiftui": {
      "test_command": "swift test",
      "format_command": "swift-format --in-place",
      "lint_command": "swiftlint",
      "build_command": "swift build",
      "deps_command": "swift package resolve",
      "security_audit_command": "swift package audit-dependencies",
      "release_command": "swift build -c release"
    },
    "ruby_rails": {
      "test_command": "bundle exec rspec",
      "format_command": "bundle exec rubocop -A",
      "lint_command": "bundle exec rubocop",
      "build_command": "bundle install",
      "deps_command": "bundle update",
      "security_audit_command": "bundle audit",
      "release_command": "RAILS_ENV=production bundle exec rake assets:precompile"
    },
    "infrastructure": {
      "test_command": "terraform plan",
      "lint_command": "terraform fmt -check",
      "security_audit_command": "checkov -d .",
      "deploy_command": "terraform apply"
    }
  },
  "quality_gates": {
    "commit_requirements": {
      "format_check": true,
      "lint_check": true,
      "test_pass": true,
      "no_warnings": false
    },
    "pr_requirements": {
      "test_coverage": 80,
      "documentation_updated": true,
      "changelog_updated": false
    }
  },
  "workflow_settings": {
    "pair_programming_mode": true,
    "decision_frequency": "high",
    "pattern_confirmation": true,
    "checkpoint_interval": 2,
    "explain_reasoning": true,
    "suggest_alternatives": true,
    "auto_apply_styles": true
  },
  "interaction_preferences": {
    "ask_about_naming": "always",
    "confirm_patterns": "always",
    "review_frequency": "every_task",
    "explain_options": true,
    "show_alternatives": true,
    "pause_for_input": true
  },
  "statusLine": {
    "type": "command",
    "command": "input=$(cat); model=$(echo \"$input\" | jq -r '.model.display_name'); dir=$(basename \"$(echo \"$input\" | jq -r '.workspace.current_dir')\"); if git rev-parse --git-dir >/dev/null 2>&1; then branch=$(git branch --show-current 2>/dev/null); printf \"%s on %s | %s\" \"$dir\" \"$branch\" \"$model\"; else printf \"%s | %s\" \"$dir\" \"$model\"; fi"
  },
  "workflow_controls": {
    "require_user_input": true,
    "confirmation_keywords": ["yes", "continue", "proceed", "looks good"],
    "modification_keywords": ["no", "change", "adjust", "different"],
    "stop_keywords": ["stop", "pause", "wait"]
  }
}
