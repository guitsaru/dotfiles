{
  "commands": {
    "github-milestone": {
      "description": "Intelligent milestone orchestrator that breaks down GitHub milestones into actionable issues with smart dependency planning",
      "command_file": "commands/github-milestone.md",
      "auto_detect_state": true,
      "workflow_phases": ["analysis", "planning", "breakdown", "validation"],
      "quality_gates": true
    },
    "github-issue": {
      "description": "Intelligent orchestrator that routes GitHub issue implementation through the complete workflow - from planning to execution to documentation",
      "command_file": "commands/github-issue.md",
      "auto_detect_state": true,
      "workflow_phases": ["planning", "implementation", "documentation"],
      "quality_gates": true,
      "orchestration_mode": true,
      "agent_handoffs": {
        "planning_to_implementation": "implementation-executor",
        "implementation_to_documentation": "pattern-documenter",
        "blocked_to_debug": "debug-agent"
      }
    },
    "github-review": {
      "description": "Comprehensive PR review orchestrator that provides expert analysis across architecture, security, performance, and best practices",
      "command_file": "commands/github-review.md",
      "auto_detect_state": true,
      "workflow_phases": ["analysis", "specialist_review", "synthesis"],
      "quality_gates": true
    },
    "continue": {
      "description": "Continue implementation work from current state with auto-context detection",
      "command_file": "commands/continue.md",
      "auto_resume": true
    },
    "plan": {
      "description": "Direct access to planning phase for GitHub issues",
      "command_file": "commands/plan.md",
      "direct_phase": "planning"
    },
    "document": {
      "description": "Direct access to documentation phase for pattern capture",
      "command_file": "commands/document.md", 
      "direct_phase": "documentation"
    },
    "create-milestone": {
      "description": "Create GitHub milestones from project requirements with scope analysis",
      "command_file": "commands/create-milestone.md",
      "direct_phase": "milestone_creation"
    }
  },
  "hooks": {
    "pre-commit": {
      "description": "Run quality checks before commits",
      "command": "mix format --check-formatted && mix credo --strict && mix test",
      "enabled": true
    },
    "post-implementation": {
      "description": "Post-implementation quality and documentation checks",
      "command": "echo 'Implementation complete. Running final checks...' && mix format && mix credo && mix test && mix docs",
      "enabled": true
    },
    "pre-pr-creation": {
      "description": "Validate action plan completeness before creating PR",
      "command": "echo '📋 Validating PR readiness...' && test -f CLAUDE.md && echo '✅ Project context found'",
      "enabled": true
    },
    "post-task-completion": {
      "description": "Run after each task in action plan completes",
      "command": "mix compile --warnings-as-errors && mix test --only unit",
      "enabled": true
    },
    "migration-check": {
      "description": "Validate migrations before and after running",
      "command": "mix ecto.migrate --log-sql && mix ecto.rollback && mix ecto.migrate",
      "enabled": true,
      "trigger_on": ["priv/repo/migrations/*.exs"]
    },
    "security-check": {
      "description": "Run security audit on auth-related changes",
      "command": "mix deps.audit && mix sobelow --config",
      "enabled": false,
      "trigger_on": ["**/auth*.ex", "**/session*.ex", "**/permission*.ex"]
    },
    "performance-check": {
      "description": "Run performance benchmarks on critical paths",
      "command": "mix test --only benchmark",
      "enabled": false,
      "trigger_on": ["**/query*.ex", "**/repo*.ex"]
    }
  },
  "output_styles": {
    "database-work": {
      "description": "PostgreSQL/Ecto patterns with migrations and query optimization",
      "auto_apply": true,
      "file_patterns": ["**/migrations/*.exs", "**/schemas/*.ex", "**/repo.ex"],
      "style_file": "output-styles/database-work.md"
    },
    "liveview-ui": {
      "description": "Phoenix LiveView components with Tailwind/DaisyUI styling",
      "auto_apply": true,
      "file_patterns": ["*.heex", "**/live/*.ex", "assets/**/*.js"],
      "style_file": "output-styles/liveview-ui.md"
    },
    "testing-patterns": {
      "description": "Comprehensive testing with ExUnit and property-based tests",
      "auto_apply": true,
      "file_patterns": ["test/**/*.exs", "**/test_helper.exs", "**/*_test.exs"],
      "style_file": "output-styles/testing-patterns.md"
    },
    "api-development": {
      "description": "RESTful and GraphQL API patterns",
      "auto_apply": true,
      "file_patterns": ["**/controllers/*.ex", "**/views/*.ex", "**/schema.ex"],
      "style_file": "output-styles/api-development.md"
    },
    "documentation": {
      "description": "ExDoc and project documentation standards",
      "auto_apply": true,
      "file_patterns": ["*.md", "guides/*.md", "**/doc.ex"],
      "style_file": "output-styles/documentation.md"
    }
  },
  "project_defaults": {
    "elixir_phoenix": {
      "test_command": "mix test",
      "format_command": "mix format",
      "lint_command": "mix credo --strict",
      "build_command": "mix compile",
      "deps_command": "mix deps.get",
      "security_audit_command": "mix deps.audit",
      "release_command": "MIX_ENV=prod mix release"
    },
    "swift_swiftui": {
      "test_command": "swift test",
      "format_command": "swift-format --in-place",
      "lint_command": "swiftlint",
      "build_command": "swift build",
      "deps_command": "swift package resolve",
      "security_audit_command": "swift package audit-dependencies",
      "release_command": "swift build -c release"
    },
    "ruby_rails": {
      "test_command": "bundle exec rspec",
      "format_command": "bundle exec rubocop -A",
      "lint_command": "bundle exec rubocop",
      "build_command": "bundle install",
      "deps_command": "bundle update",
      "security_audit_command": "bundle audit",
      "release_command": "RAILS_ENV=production bundle exec rake assets:precompile"
    },
    "infrastructure": {
      "test_command": "terraform plan",
      "lint_command": "terraform fmt -check",
      "security_audit_command": "checkov -d .",
      "deploy_command": "terraform apply"
    }
  },
  "quality_gates": {
    "commit_requirements": {
      "format_check": true,
      "lint_check": true, 
      "test_pass": true,
      "no_warnings": false
    },
    "pr_requirements": {
      "test_coverage": 80,
      "documentation_updated": true,
      "changelog_updated": false
    }
  },
  "workflow_settings": {
    "show_phase_transitions": true,
    "verbose_progress": true,
    "preserve_context": true,
    "auto_apply_styles": true
  },
  "interaction_mode": {
    "user_approval_required": true,
    "confirmation_checkpoints": [
      "planning_complete",
      "milestone_breakdown_ready",
      "specialist_routing"
    ],
    "approval_timeout": 300,
    "default_approval_response": "request_input",
    "checkpoint_format": {
      "planning": "🔍 **PLANNING APPROVAL NEEDED**\nPlease review and type 'APPROVED' to continue or provide feedback:",
      "implementation": "⚡ **IMPLEMENTATION CHECKPOINT**\nReview changes and type 'COMMIT' to proceed or 'MODIFY' to adjust:",
      "milestone": "📋 **MILESTONE BREAKDOWN READY**\nType 'APPROVED' to create GitHub issues or 'MODIFY' to adjust the plan:",
      "routing": "🔀 **AGENT ROUTING DECISION**\nShould I route this to [AGENT]? Type 'YES' to proceed or suggest alternative:"
    }
  },
  "statusLine": {
    "type": "command",
    "command": "input=$(cat); model=$(echo \"$input\" | jq -r '.model.display_name'); dir=$(basename \"$(echo \"$input\" | jq -r '.workspace.current_dir')\"); if git rev-parse --git-dir >/dev/null 2>&1; then branch=$(git branch --show-current 2>/dev/null); printf \"%s on %s | %s\" \"$dir\" \"$branch\" \"$model\"; else printf \"%s | %s\" \"$dir\" \"$model\"; fi"
  },
  "workflow_controls": {
    "auto_continue": false,
    "require_explicit_approval": true,
    "pause_on_specialist_routing": true,
    "pause_on_file_modifications": false,
    "pause_on_github_operations": true,
    "confirmation_keywords": ["APPROVED", "COMMIT", "CONTINUE", "YES"],
    "modification_keywords": ["MODIFY", "CHANGE", "ADJUST", "NO"],
    "stop_keywords": ["STOP", "PAUSE", "WAIT", "CANCEL"]
  }
}