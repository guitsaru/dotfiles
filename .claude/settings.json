{
  "model": "opusplan",
  "commands": {
    "work": {
      "description": "Collaborative work on GitHub issues/PRs with pair programming approach",
      "command_file": "commands/work.md",
      "interactive_mode": true
    },
    "plan": {
      "description": "Create implementation plans with interactive decision points",
      "command_file": "commands/plan.md",
      "interactive_mode": true
    },
    "implement": {
      "description": "Execute implementation tasks with pattern discussions",
      "command_file": "commands/implement.md",
      "interactive_mode": true
    },
    "review": {
      "description": "Interactive code review with architectural guidance",
      "command_file": "commands/review.md",
      "interactive_mode": true
    },
    "document": {
      "description": "Capture patterns and learnings collaboratively",
      "command_file": "commands/document.md",
      "interactive_mode": true
    },
    "continue": {
      "description": "Continue from current work state with context",
      "command_file": "commands/continue.md",
      "interactive_mode": true
    },
    "milestone": {
      "description": "Break down GitHub milestones into actionable issues collaboratively",
      "command_file": "commands/milestone.md",
      "interactive_mode": true
    },
    "branch": {
      "description": "Prepare feature branch and draft PR for implementation work",
      "command_file": "commands/branch.md",
      "interactive_mode": false
    }
  },
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'Pre-tool hook for Bash commands'"
          }
        ]
      }
    ],
    "UserPromptSubmit": [],
    "PostToolUse": [
      {
        "matcher": "Edit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'File modified - consider running tests if applicable'"
          }
        ]
      }
    ]
  },
  "output_styles": {
    "pair-programming": {
      "description": "Interactive pair programming format for collaborative development",
      "auto_apply": true,
      "file_patterns": [
        "*"
      ],
      "style_file": "output-styles/pair-programming.md"
    },
    "pattern-discussion": {
      "description": "Format for exploring and discussing code patterns",
      "auto_apply": false,
      "trigger_on": [
        "pattern_detected",
        "refactoring_opportunity"
      ],
      "style_file": "output-styles/pattern-discussion.md"
    },
    "decision-point": {
      "description": "Format for presenting architectural and implementation decisions",
      "auto_apply": false,
      "trigger_on": [
        "architecture_decision",
        "implementation_choice",
        "trade_off_analysis"
      ],
      "style_file": "output-styles/decision-point.md"
    },
    "implementation-plan": {
      "description": "Structured format for presenting implementation plans with user checkpoints",
      "auto_apply": false,
      "trigger_on": [
        "planning_phase",
        "action_plan_creation"
      ],
      "style_file": "output-styles/implementation-plan.md"
    },
    "database-work": {
      "description": "PostgreSQL/Ecto patterns with migrations and query optimization",
      "auto_apply": true,
      "file_patterns": [
        "**/migrations/*.exs",
        "**/schemas/*.ex",
        "**/repo.ex"
      ],
      "style_file": "output-styles/database-work.md"
    },
    "liveview-ui": {
      "description": "Phoenix LiveView components with Tailwind/DaisyUI styling",
      "auto_apply": true,
      "file_patterns": [
        "*.heex",
        "**/live/*.ex",
        "assets/**/*.js"
      ],
      "style_file": "output-styles/liveview-ui.md"
    },
    "testing-patterns": {
      "description": "Comprehensive testing with ExUnit and property-based tests",
      "auto_apply": true,
      "file_patterns": [
        "test/**/*.exs",
        "**/test_helper.exs",
        "**/*_test.exs"
      ],
      "style_file": "output-styles/testing-patterns.md"
    },
    "documentation": {
      "description": "ExDoc and project documentation standards",
      "auto_apply": true,
      "file_patterns": [
        "*.md",
        "guides/*.md",
        "**/doc.ex"
      ],
      "style_file": "output-styles/documentation.md"
    }
  },
  "project_defaults": {
    "elixir_phoenix": {
      "test_command": "mix test",
      "format_command": "mix format",
      "lint_command": "mix credo --strict",
      "build_command": "mix compile",
      "deps_command": "mix deps.get",
      "security_audit_command": "mix deps.audit",
      "release_command": "MIX_ENV=prod mix release"
    },
    "swift_swiftui": {
      "test_command": "swift test",
      "format_command": "swift-format --in-place",
      "lint_command": "swiftlint",
      "build_command": "swift build",
      "deps_command": "swift package resolve",
      "security_audit_command": "swift package audit-dependencies",
      "release_command": "swift build -c release"
    },
    "ruby_rails": {
      "test_command": "bundle exec rspec",
      "format_command": "bundle exec rubocop -A",
      "lint_command": "bundle exec rubocop",
      "build_command": "bundle install",
      "deps_command": "bundle update",
      "security_audit_command": "bundle audit",
      "release_command": "RAILS_ENV=production bundle exec rake assets:precompile"
    },
    "infrastructure": {
      "test_command": "terraform plan",
      "lint_command": "terraform fmt -check",
      "security_audit_command": "checkov -d .",
      "deploy_command": "terraform apply"
    }
  },
  "quality_gates": {
    "commit_requirements": {
      "format_check": true,
      "lint_check": true,
      "test_pass": true,
      "no_warnings": false
    },
    "pr_requirements": {
      "test_coverage": 80,
      "documentation_updated": true,
      "changelog_updated": false
    }
  },
  "workflow_settings": {
    "pair_programming_mode": true,
    "decision_frequency": "high",
    "pattern_confirmation": true,
    "checkpoint_interval": 2,
    "explain_reasoning": true,
    "suggest_alternatives": true,
    "auto_apply_styles": true
  },
  "interaction_preferences": {
    "ask_about_naming": "always",
    "confirm_patterns": "always",
    "review_frequency": "every_task",
    "explain_options": true,
    "show_alternatives": true,
    "pause_for_input": true
  },
  "statusLine": {
    "type": "command",
    "command": "input=$(cat); model=$(echo \"$input\" | jq -r '.model.display_name'); dir=$(basename \"$(echo \"$input\" | jq -r '.workspace.current_dir')\"); if git rev-parse --git-dir >/dev/null 2>&1; then branch=$(git branch --show-current 2>/dev/null); printf \"%s on %s | %s\" \"$dir\" \"$branch\" \"$model\"; else printf \"%s | %s\" \"$dir\" \"$model\"; fi"
  },
  "workflow_controls": {
    "require_user_input": true,
    "confirmation_keywords": [
      "yes",
      "continue",
      "proceed",
      "looks good"
    ],
    "modification_keywords": [
      "no",
      "change",
      "adjust",
      "different"
    ],
    "stop_keywords": [
      "stop",
      "pause",
      "wait"
    ]
  },
  "git_settings": {
    "cosign_commits": false,
    "commit_format": "standard",
    "auto_link_issues": true,
    "draft_pr_by_default": true
  },
  "git_workflow": {
    "auto_commit_after_phase": true,
    "update_pr_on_checkpoint": true,
    "document_patterns": true,
    "commit_frequency": "phase",
    "pr_update_frequency": "checkpoint",
    "auto_ready_threshold": 80,
    "require_tests_for_ready": true,
    "notify_reviewers_when_ready": true,
    "branch_management": {
      "always_update_main": true,
      "require_feature_branch": true,
      "auto_create_from_main": true,
      "push_branch_immediately": true
    }
  },
  "agent_settings": {
    "branch_prep": {
      "default_prefix": "feature/",
      "auto_push_branch": true,
      "update_main_before_branch": true,
      "require_clean_working_dir": true,
      "max_branch_age_reuse_days": 1,
      "auto_fetch_issue_titles": true
    },
    "pr_draft": {
      "branch_prefix": "feature/",
      "always_draft": true,
      "include_checklist": true,
      "assume_branch_ready": true,
      "default_labels": [
        "work-in-progress"
      ]
    },
    "git_commit": {
      "run_quality_checks": true,
      "auto_push_feature_branches": true,
      "commit_message_format": "conventional",
      "include_file_counts": false,
      "link_issues": "always"
    },
    "pr_update": {
      "include_file_changes": true,
      "add_progress_comments": true,
      "auto_transition_ready": true
    },
    "pr_document": {
      "auto_detect_patterns": true,
      "update_project_docs": false,
      "include_code_examples": true,
      "document_decisions": true,
      "create_knowledge_artifacts": true
    }
  },
  "model": "opusplan"
}